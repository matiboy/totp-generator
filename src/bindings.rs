/* automatically generated by rust-bindgen 0.69.5 */

pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_pthread_handler_rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_attr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_cond_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_condattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutex_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutexattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_once_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlock_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlockattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub const zbar_color_e_ZBAR_SPACE: zbar_color_e = 0;
pub const zbar_color_e_ZBAR_BAR: zbar_color_e = 1;
pub type zbar_color_e = ::std::os::raw::c_uint;
pub use self::zbar_color_e as zbar_color_t;
pub const zbar_symbol_type_e_ZBAR_NONE: zbar_symbol_type_e = 0;
pub const zbar_symbol_type_e_ZBAR_PARTIAL: zbar_symbol_type_e = 1;
pub const zbar_symbol_type_e_ZBAR_EAN2: zbar_symbol_type_e = 2;
pub const zbar_symbol_type_e_ZBAR_EAN5: zbar_symbol_type_e = 5;
pub const zbar_symbol_type_e_ZBAR_EAN8: zbar_symbol_type_e = 8;
pub const zbar_symbol_type_e_ZBAR_UPCE: zbar_symbol_type_e = 9;
pub const zbar_symbol_type_e_ZBAR_ISBN10: zbar_symbol_type_e = 10;
pub const zbar_symbol_type_e_ZBAR_UPCA: zbar_symbol_type_e = 12;
pub const zbar_symbol_type_e_ZBAR_EAN13: zbar_symbol_type_e = 13;
pub const zbar_symbol_type_e_ZBAR_ISBN13: zbar_symbol_type_e = 14;
pub const zbar_symbol_type_e_ZBAR_COMPOSITE: zbar_symbol_type_e = 15;
pub const zbar_symbol_type_e_ZBAR_I25: zbar_symbol_type_e = 25;
pub const zbar_symbol_type_e_ZBAR_DATABAR: zbar_symbol_type_e = 34;
pub const zbar_symbol_type_e_ZBAR_DATABAR_EXP: zbar_symbol_type_e = 35;
pub const zbar_symbol_type_e_ZBAR_CODABAR: zbar_symbol_type_e = 38;
pub const zbar_symbol_type_e_ZBAR_CODE39: zbar_symbol_type_e = 39;
pub const zbar_symbol_type_e_ZBAR_PDF417: zbar_symbol_type_e = 57;
pub const zbar_symbol_type_e_ZBAR_QRCODE: zbar_symbol_type_e = 64;
pub const zbar_symbol_type_e_ZBAR_SQCODE: zbar_symbol_type_e = 80;
pub const zbar_symbol_type_e_ZBAR_CODE93: zbar_symbol_type_e = 93;
pub const zbar_symbol_type_e_ZBAR_CODE128: zbar_symbol_type_e = 128;
pub const zbar_symbol_type_e_ZBAR_SYMBOL: zbar_symbol_type_e = 255;
pub const zbar_symbol_type_e_ZBAR_ADDON2: zbar_symbol_type_e = 512;
pub const zbar_symbol_type_e_ZBAR_ADDON5: zbar_symbol_type_e = 1280;
pub const zbar_symbol_type_e_ZBAR_ADDON: zbar_symbol_type_e = 1792;
pub type zbar_symbol_type_e = ::std::os::raw::c_uint;
pub use self::zbar_symbol_type_e as zbar_symbol_type_t;
pub const zbar_orientation_e_ZBAR_ORIENT_UNKNOWN: zbar_orientation_e = -1;
pub const zbar_orientation_e_ZBAR_ORIENT_UP: zbar_orientation_e = 0;
pub const zbar_orientation_e_ZBAR_ORIENT_RIGHT: zbar_orientation_e = 1;
pub const zbar_orientation_e_ZBAR_ORIENT_DOWN: zbar_orientation_e = 2;
pub const zbar_orientation_e_ZBAR_ORIENT_LEFT: zbar_orientation_e = 3;
pub type zbar_orientation_e = ::std::os::raw::c_int;
pub use self::zbar_orientation_e as zbar_orientation_t;
pub const zbar_error_e_ZBAR_OK: zbar_error_e = 0;
pub const zbar_error_e_ZBAR_ERR_NOMEM: zbar_error_e = 1;
pub const zbar_error_e_ZBAR_ERR_INTERNAL: zbar_error_e = 2;
pub const zbar_error_e_ZBAR_ERR_UNSUPPORTED: zbar_error_e = 3;
pub const zbar_error_e_ZBAR_ERR_INVALID: zbar_error_e = 4;
pub const zbar_error_e_ZBAR_ERR_SYSTEM: zbar_error_e = 5;
pub const zbar_error_e_ZBAR_ERR_LOCKING: zbar_error_e = 6;
pub const zbar_error_e_ZBAR_ERR_BUSY: zbar_error_e = 7;
pub const zbar_error_e_ZBAR_ERR_XDISPLAY: zbar_error_e = 8;
pub const zbar_error_e_ZBAR_ERR_XPROTO: zbar_error_e = 9;
pub const zbar_error_e_ZBAR_ERR_CLOSED: zbar_error_e = 10;
pub const zbar_error_e_ZBAR_ERR_WINAPI: zbar_error_e = 11;
pub const zbar_error_e_ZBAR_ERR_NUM: zbar_error_e = 12;
pub type zbar_error_e = ::std::os::raw::c_uint;
pub use self::zbar_error_e as zbar_error_t;
pub const zbar_config_e_ZBAR_CFG_ENABLE: zbar_config_e = 0;
pub const zbar_config_e_ZBAR_CFG_ADD_CHECK: zbar_config_e = 1;
pub const zbar_config_e_ZBAR_CFG_EMIT_CHECK: zbar_config_e = 2;
pub const zbar_config_e_ZBAR_CFG_ASCII: zbar_config_e = 3;
pub const zbar_config_e_ZBAR_CFG_BINARY: zbar_config_e = 4;
pub const zbar_config_e_ZBAR_CFG_NUM: zbar_config_e = 5;
pub const zbar_config_e_ZBAR_CFG_MIN_LEN: zbar_config_e = 32;
pub const zbar_config_e_ZBAR_CFG_MAX_LEN: zbar_config_e = 33;
pub const zbar_config_e_ZBAR_CFG_UNCERTAINTY: zbar_config_e = 64;
pub const zbar_config_e_ZBAR_CFG_POSITION: zbar_config_e = 128;
pub const zbar_config_e_ZBAR_CFG_TEST_INVERTED: zbar_config_e = 129;
pub const zbar_config_e_ZBAR_CFG_X_DENSITY: zbar_config_e = 256;
pub const zbar_config_e_ZBAR_CFG_Y_DENSITY: zbar_config_e = 257;
pub type zbar_config_e = ::std::os::raw::c_uint;
pub use self::zbar_config_e as zbar_config_t;
pub const zbar_modifier_e_ZBAR_MOD_GS1: zbar_modifier_e = 0;
pub const zbar_modifier_e_ZBAR_MOD_AIM: zbar_modifier_e = 1;
pub const zbar_modifier_e_ZBAR_MOD_NUM: zbar_modifier_e = 2;
pub type zbar_modifier_e = ::std::os::raw::c_uint;
pub use self::zbar_modifier_e as zbar_modifier_t;
pub const video_control_type_e_VIDEO_CNTL_INTEGER: video_control_type_e = 1;
pub const video_control_type_e_VIDEO_CNTL_MENU: video_control_type_e = 2;
pub const video_control_type_e_VIDEO_CNTL_BUTTON: video_control_type_e = 3;
pub const video_control_type_e_VIDEO_CNTL_INTEGER64: video_control_type_e = 4;
pub const video_control_type_e_VIDEO_CNTL_STRING: video_control_type_e = 5;
pub const video_control_type_e_VIDEO_CNTL_BOOLEAN: video_control_type_e = 6;
pub type video_control_type_e = ::std::os::raw::c_uint;
pub use self::video_control_type_e as video_control_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct video_control_menu_s {
    pub name: *mut ::std::os::raw::c_char,
    pub value: i64,
}
#[test]
fn bindgen_test_layout_video_control_menu_s() {
    const UNINIT: ::std::mem::MaybeUninit<video_control_menu_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<video_control_menu_s>(),
        16usize,
        concat!("Size of: ", stringify!(video_control_menu_s))
    );
    assert_eq!(
        ::std::mem::align_of::<video_control_menu_s>(),
        8usize,
        concat!("Alignment of ", stringify!(video_control_menu_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(video_control_menu_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(video_control_menu_s),
            "::",
            stringify!(value)
        )
    );
}
pub type video_control_menu_t = video_control_menu_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct video_controls_s {
    pub name: *mut ::std::os::raw::c_char,
    pub group: *mut ::std::os::raw::c_char,
    pub type_: video_control_type_t,
    pub min: i64,
    pub max: i64,
    pub def: i64,
    pub step: u64,
    pub menu_size: ::std::os::raw::c_uint,
    pub menu: *mut video_control_menu_t,
    pub next: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_video_controls_s() {
    const UNINIT: ::std::mem::MaybeUninit<video_controls_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<video_controls_s>(),
        80usize,
        concat!("Size of: ", stringify!(video_controls_s))
    );
    assert_eq!(
        ::std::mem::align_of::<video_controls_s>(),
        8usize,
        concat!("Alignment of ", stringify!(video_controls_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(video_controls_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(video_controls_s),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(video_controls_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(video_controls_s),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(video_controls_s),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(video_controls_s),
            "::",
            stringify!(def)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(video_controls_s),
            "::",
            stringify!(step)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).menu_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(video_controls_s),
            "::",
            stringify!(menu_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).menu) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(video_controls_s),
            "::",
            stringify!(menu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(video_controls_s),
            "::",
            stringify!(next)
        )
    );
}
pub type video_controls_t = video_controls_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct video_resolution_s {
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub max_fps: f32,
}
#[test]
fn bindgen_test_layout_video_resolution_s() {
    const UNINIT: ::std::mem::MaybeUninit<video_resolution_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<video_resolution_s>(),
        12usize,
        concat!("Size of: ", stringify!(video_resolution_s))
    );
    assert_eq!(
        ::std::mem::align_of::<video_resolution_s>(),
        4usize,
        concat!("Alignment of ", stringify!(video_resolution_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(video_resolution_s),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(video_resolution_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_fps) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(video_resolution_s),
            "::",
            stringify!(max_fps)
        )
    );
}
extern "C" {
    pub fn zbar_version(
        major: *mut ::std::os::raw::c_uint,
        minor: *mut ::std::os::raw::c_uint,
        patch: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_set_verbosity(verbosity: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zbar_increase_verbosity();
}
extern "C" {
    pub fn zbar_get_symbol_name(sym: zbar_symbol_type_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zbar_get_addon_name(sym: zbar_symbol_type_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zbar_get_config_name(config: zbar_config_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zbar_get_modifier_name(modifier: zbar_modifier_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zbar_get_orientation_name(
        orientation: zbar_orientation_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zbar_parse_config(
        config_string: *const ::std::os::raw::c_char,
        symbology: *mut zbar_symbol_type_t,
        config: *mut zbar_config_t,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _zbar_error_spew(
        object: *const ::std::os::raw::c_void,
        verbosity: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _zbar_error_string(
        object: *const ::std::os::raw::c_void,
        verbosity: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn _zbar_get_error_code(object: *const ::std::os::raw::c_void) -> zbar_error_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zbar_symbol_s {
    _unused: [u8; 0],
}
pub type zbar_symbol_t = zbar_symbol_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zbar_symbol_set_s {
    _unused: [u8; 0],
}
pub type zbar_symbol_set_t = zbar_symbol_set_s;
extern "C" {
    pub fn zbar_symbol_ref(symbol: *const zbar_symbol_t, refs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zbar_symbol_get_type(symbol: *const zbar_symbol_t) -> zbar_symbol_type_t;
}
extern "C" {
    pub fn zbar_symbol_get_configs(symbol: *const zbar_symbol_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn zbar_symbol_get_modifiers(symbol: *const zbar_symbol_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn zbar_symbol_get_data(symbol: *const zbar_symbol_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zbar_symbol_get_data_length(symbol: *const zbar_symbol_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn zbar_symbol_get_quality(symbol: *const zbar_symbol_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_symbol_get_count(symbol: *const zbar_symbol_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_symbol_get_loc_size(symbol: *const zbar_symbol_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn zbar_symbol_get_loc_x(
        symbol: *const zbar_symbol_t,
        index: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_symbol_get_loc_y(
        symbol: *const zbar_symbol_t,
        index: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_symbol_get_orientation(symbol: *const zbar_symbol_t) -> zbar_orientation_t;
}
extern "C" {
    pub fn zbar_symbol_next(symbol: *const zbar_symbol_t) -> *const zbar_symbol_t;
}
extern "C" {
    pub fn zbar_symbol_get_components(symbol: *const zbar_symbol_t) -> *const zbar_symbol_set_t;
}
extern "C" {
    pub fn zbar_symbol_first_component(symbol: *const zbar_symbol_t) -> *const zbar_symbol_t;
}
extern "C" {
    pub fn zbar_symbol_xml(
        symbol: *const zbar_symbol_t,
        buffer: *mut *mut ::std::os::raw::c_char,
        buflen: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zbar_symbol_set_ref(symbols: *const zbar_symbol_set_t, refs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zbar_symbol_set_get_size(symbols: *const zbar_symbol_set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_symbol_set_first_symbol(symbols: *const zbar_symbol_set_t) -> *const zbar_symbol_t;
}
extern "C" {
    pub fn zbar_symbol_set_first_unfiltered(
        symbols: *const zbar_symbol_set_t,
    ) -> *const zbar_symbol_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zbar_image_s {
    _unused: [u8; 0],
}
pub type zbar_image_t = zbar_image_s;
pub type zbar_image_cleanup_handler_t =
    ::std::option::Option<unsafe extern "C" fn(image: *mut zbar_image_t)>;
pub type zbar_image_data_handler_t = ::std::option::Option<
    unsafe extern "C" fn(image: *mut zbar_image_t, userdata: *const ::std::os::raw::c_void),
>;
extern "C" {
    pub fn zbar_image_create() -> *mut zbar_image_t;
}
extern "C" {
    pub fn zbar_image_destroy(image: *mut zbar_image_t);
}
extern "C" {
    pub fn zbar_image_ref(image: *mut zbar_image_t, refs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zbar_image_convert(
        image: *const zbar_image_t,
        format: ::std::os::raw::c_ulong,
    ) -> *mut zbar_image_t;
}
extern "C" {
    pub fn zbar_image_convert_resize(
        image: *const zbar_image_t,
        format: ::std::os::raw::c_ulong,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ) -> *mut zbar_image_t;
}
extern "C" {
    pub fn zbar_image_get_format(image: *const zbar_image_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn zbar_image_get_sequence(image: *const zbar_image_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn zbar_image_get_width(image: *const zbar_image_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn zbar_image_get_height(image: *const zbar_image_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn zbar_image_get_size(
        image: *const zbar_image_t,
        width: *mut ::std::os::raw::c_uint,
        height: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn zbar_image_get_crop(
        image: *const zbar_image_t,
        x: *mut ::std::os::raw::c_uint,
        y: *mut ::std::os::raw::c_uint,
        width: *mut ::std::os::raw::c_uint,
        height: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn zbar_image_get_data(image: *const zbar_image_t) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn zbar_image_get_data_length(img: *const zbar_image_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn zbar_image_get_symbols(image: *const zbar_image_t) -> *const zbar_symbol_set_t;
}
extern "C" {
    pub fn zbar_image_set_symbols(image: *mut zbar_image_t, symbols: *const zbar_symbol_set_t);
}
extern "C" {
    pub fn zbar_image_first_symbol(image: *const zbar_image_t) -> *const zbar_symbol_t;
}
extern "C" {
    pub fn zbar_image_set_format(image: *mut zbar_image_t, format: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn zbar_image_set_sequence(image: *mut zbar_image_t, sequence_num: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn zbar_image_set_size(
        image: *mut zbar_image_t,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn zbar_image_set_crop(
        image: *mut zbar_image_t,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn zbar_image_set_data(
        image: *mut zbar_image_t,
        data: *const ::std::os::raw::c_void,
        data_byte_length: ::std::os::raw::c_ulong,
        cleanup_hndlr: zbar_image_cleanup_handler_t,
    );
}
extern "C" {
    pub fn zbar_image_free_data(image: *mut zbar_image_t);
}
extern "C" {
    pub fn zbar_image_set_userdata(image: *mut zbar_image_t, userdata: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn zbar_image_get_userdata(image: *const zbar_image_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zbar_image_write(
        image: *const zbar_image_t,
        filebase: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_image_read(filename: *mut ::std::os::raw::c_char) -> *mut zbar_image_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zbar_processor_s {
    _unused: [u8; 0],
}
pub type zbar_processor_t = zbar_processor_s;
extern "C" {
    pub fn zbar_processor_create(threaded: ::std::os::raw::c_int) -> *mut zbar_processor_t;
}
extern "C" {
    pub fn zbar_processor_destroy(processor: *mut zbar_processor_t);
}
extern "C" {
    pub fn zbar_processor_init(
        processor: *mut zbar_processor_t,
        video_device: *const ::std::os::raw::c_char,
        enable_display: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_processor_request_size(
        processor: *mut zbar_processor_t,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_processor_request_interface(
        processor: *mut zbar_processor_t,
        version: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_processor_request_iomode(
        video: *mut zbar_processor_t,
        iomode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_processor_force_format(
        processor: *mut zbar_processor_t,
        input_format: ::std::os::raw::c_ulong,
        output_format: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_processor_set_data_handler(
        processor: *mut zbar_processor_t,
        handler: zbar_image_data_handler_t,
        userdata: *const ::std::os::raw::c_void,
    ) -> zbar_image_data_handler_t;
}
extern "C" {
    pub fn zbar_processor_set_userdata(
        processor: *mut zbar_processor_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn zbar_processor_get_userdata(
        processor: *const zbar_processor_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn zbar_processor_set_config(
        processor: *mut zbar_processor_t,
        symbology: zbar_symbol_type_t,
        config: zbar_config_t,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_processor_set_control(
        processor: *mut zbar_processor_t,
        control_name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_processor_get_control(
        processor: *mut zbar_processor_t,
        control_name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_processor_is_visible(processor: *mut zbar_processor_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_processor_set_visible(
        processor: *mut zbar_processor_t,
        visible: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_processor_set_active(
        processor: *mut zbar_processor_t,
        active: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_processor_get_results(
        processor: *const zbar_processor_t,
    ) -> *const zbar_symbol_set_t;
}
extern "C" {
    pub fn zbar_processor_user_wait(
        processor: *mut zbar_processor_t,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_process_one(
        processor: *mut zbar_processor_t,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_process_image(
        processor: *mut zbar_processor_t,
        image: *mut zbar_image_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_processor_request_dbus(
        proc_: *mut zbar_processor_t,
        req_dbus_enabled: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zbar_video_s {
    _unused: [u8; 0],
}
pub type zbar_video_t = zbar_video_s;
extern "C" {
    pub fn zbar_video_create() -> *mut zbar_video_t;
}
extern "C" {
    pub fn zbar_video_destroy(video: *mut zbar_video_t);
}
extern "C" {
    pub fn zbar_video_open(
        video: *mut zbar_video_t,
        device: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_video_get_fd(video: *const zbar_video_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_video_request_size(
        video: *mut zbar_video_t,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_video_request_interface(
        video: *mut zbar_video_t,
        version: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_video_request_iomode(
        video: *mut zbar_video_t,
        iomode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_video_get_width(video: *const zbar_video_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_video_get_height(video: *const zbar_video_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_video_init(
        video: *mut zbar_video_t,
        format: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_video_enable(
        video: *mut zbar_video_t,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_video_next_image(video: *mut zbar_video_t) -> *mut zbar_image_t;
}
extern "C" {
    pub fn zbar_video_set_control(
        video: *mut zbar_video_t,
        control_name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_video_get_control(
        video: *mut zbar_video_t,
        control_name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_video_get_controls(
        video: *const zbar_video_t,
        index: ::std::os::raw::c_int,
    ) -> *mut video_controls_s;
}
extern "C" {
    pub fn zbar_video_get_resolutions(
        vdo: *const zbar_video_t,
        index: ::std::os::raw::c_int,
    ) -> *mut video_resolution_s;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zbar_window_s {
    _unused: [u8; 0],
}
pub type zbar_window_t = zbar_window_s;
extern "C" {
    pub fn zbar_window_create() -> *mut zbar_window_t;
}
extern "C" {
    pub fn zbar_window_destroy(window: *mut zbar_window_t);
}
extern "C" {
    pub fn zbar_window_attach(
        window: *mut zbar_window_t,
        x11_display_w32_hwnd: *mut ::std::os::raw::c_void,
        x11_drawable: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_window_set_overlay(window: *mut zbar_window_t, level: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zbar_window_get_overlay(window: *const zbar_window_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_window_draw(
        window: *mut zbar_window_t,
        image: *mut zbar_image_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_window_redraw(window: *mut zbar_window_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_window_resize(
        window: *mut zbar_window_t,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_negotiate_format(
        video: *mut zbar_video_t,
        window: *mut zbar_window_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zbar_image_scanner_s {
    _unused: [u8; 0],
}
pub type zbar_image_scanner_t = zbar_image_scanner_s;
extern "C" {
    pub fn zbar_image_scanner_create() -> *mut zbar_image_scanner_t;
}
extern "C" {
    pub fn zbar_image_scanner_destroy(scanner: *mut zbar_image_scanner_t);
}
extern "C" {
    pub fn zbar_image_scanner_set_data_handler(
        scanner: *mut zbar_image_scanner_t,
        handler: zbar_image_data_handler_t,
        userdata: *const ::std::os::raw::c_void,
    ) -> zbar_image_data_handler_t;
}
extern "C" {
    pub fn zbar_image_scanner_request_dbus(
        scanner: *mut zbar_image_scanner_t,
        req_dbus_enabled: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_image_scanner_set_config(
        scanner: *mut zbar_image_scanner_t,
        symbology: zbar_symbol_type_t,
        config: zbar_config_t,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_image_scanner_get_config(
        scanner: *mut zbar_image_scanner_t,
        symbology: zbar_symbol_type_t,
        config: zbar_config_t,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_image_scanner_enable_cache(
        scanner: *mut zbar_image_scanner_t,
        enable: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zbar_image_scanner_recycle_image(
        scanner: *mut zbar_image_scanner_t,
        image: *mut zbar_image_t,
    );
}
extern "C" {
    pub fn zbar_image_scanner_get_results(
        scanner: *const zbar_image_scanner_t,
    ) -> *const zbar_symbol_set_t;
}
extern "C" {
    pub fn zbar_scan_image(
        scanner: *mut zbar_image_scanner_t,
        image: *mut zbar_image_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zbar_decoder_s {
    _unused: [u8; 0],
}
pub type zbar_decoder_t = zbar_decoder_s;
pub type zbar_decoder_handler_t =
    ::std::option::Option<unsafe extern "C" fn(decoder: *mut zbar_decoder_t)>;
extern "C" {
    pub fn zbar_decoder_create() -> *mut zbar_decoder_t;
}
extern "C" {
    pub fn zbar_decoder_destroy(decoder: *mut zbar_decoder_t);
}
extern "C" {
    pub fn zbar_decoder_set_config(
        decoder: *mut zbar_decoder_t,
        symbology: zbar_symbol_type_t,
        config: zbar_config_t,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_decoder_get_config(
        decoder: *mut zbar_decoder_t,
        symbology: zbar_symbol_type_t,
        config: zbar_config_t,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_decoder_get_configs(
        decoder: *const zbar_decoder_t,
        symbology: zbar_symbol_type_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn zbar_decoder_reset(decoder: *mut zbar_decoder_t);
}
extern "C" {
    pub fn zbar_decoder_new_scan(decoder: *mut zbar_decoder_t);
}
extern "C" {
    pub fn zbar_decode_width(
        decoder: *mut zbar_decoder_t,
        width: ::std::os::raw::c_uint,
    ) -> zbar_symbol_type_t;
}
extern "C" {
    pub fn zbar_decoder_get_color(decoder: *const zbar_decoder_t) -> zbar_color_t;
}
extern "C" {
    pub fn zbar_decoder_get_data(decoder: *const zbar_decoder_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zbar_decoder_get_data_length(decoder: *const zbar_decoder_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn zbar_decoder_get_type(decoder: *const zbar_decoder_t) -> zbar_symbol_type_t;
}
extern "C" {
    pub fn zbar_decoder_get_modifiers(decoder: *const zbar_decoder_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn zbar_decoder_get_direction(decoder: *const zbar_decoder_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zbar_decoder_set_handler(
        decoder: *mut zbar_decoder_t,
        handler: zbar_decoder_handler_t,
    ) -> zbar_decoder_handler_t;
}
extern "C" {
    pub fn zbar_decoder_set_userdata(
        decoder: *mut zbar_decoder_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn zbar_decoder_get_userdata(decoder: *const zbar_decoder_t)
        -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zbar_scanner_s {
    _unused: [u8; 0],
}
pub type zbar_scanner_t = zbar_scanner_s;
extern "C" {
    pub fn zbar_scanner_create(decoder: *mut zbar_decoder_t) -> *mut zbar_scanner_t;
}
extern "C" {
    pub fn zbar_scanner_destroy(scanner: *mut zbar_scanner_t);
}
extern "C" {
    pub fn zbar_scanner_reset(scanner: *mut zbar_scanner_t) -> zbar_symbol_type_t;
}
extern "C" {
    pub fn zbar_scanner_new_scan(scanner: *mut zbar_scanner_t) -> zbar_symbol_type_t;
}
extern "C" {
    pub fn zbar_scanner_flush(scanner: *mut zbar_scanner_t) -> zbar_symbol_type_t;
}
extern "C" {
    pub fn zbar_scan_y(
        scanner: *mut zbar_scanner_t,
        y: ::std::os::raw::c_int,
    ) -> zbar_symbol_type_t;
}
extern "C" {
    pub fn zbar_scanner_get_width(scanner: *const zbar_scanner_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn zbar_scanner_get_edge(
        scn: *const zbar_scanner_t,
        offset: ::std::os::raw::c_uint,
        prec: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn zbar_scanner_get_color(scanner: *const zbar_scanner_t) -> zbar_color_t;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
